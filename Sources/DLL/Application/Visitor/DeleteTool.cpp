///////////////////////////////////////////////////////////////////////////////
/// @file DeleteTool.cpp
/// @author INF2990-A15-01
/// @date 2015-09-16
/// @version 1.0
///
/// @addtogroup inf2990 INF2990
/// @{
///////////////////////////////////////////////////////////////////////////////

#include "DeleteTool.h"
#include "../../Arbre/Noeuds/NoeudTypes.h"


////////////////////////////////////////////////////////////////////////
///
/// @fn DeleteTool::~DeleteTool
///
/// Destructeur par défaut.
/// Suite à la mise en tampon des objets à supprimer,
/// on supprime les objets avec le visiteur
///
/// @return Aucune.
///
////////////////////////////////////////////////////////////////////////
DeleteTool::~DeleteTool()
{
	deleteBuffer();
}

////////////////////////////////////////////////////////////////////////
///
/// @fn virtual void DeleteTool::visitNoeudCylindre(NoeudCylindre* node)
///
/// Implémentation du visiteur Suppression pour un noeud de type
/// NoeudCylindre.
///
/// @return Aucune.
///
////////////////////////////////////////////////////////////////////////
void DeleteTool::visit(NoeudCylindre* node)
{
	defaultDelete(node);
}

////////////////////////////////////////////////////////////////////////
///
/// @fn virtual void DeleteTool::visitNoeudDepart(NoeudDepart* node)
///
/// Implémentation du visiteur Suppression pour un noeud de type
/// NoeudDepart.
///
/// @return Aucune.
///
////////////////////////////////////////////////////////////////////////
void DeleteTool::visit(NoeudDepart* node)
{
	// NoeudDepart ne peut pas être supprimé
}

////////////////////////////////////////////////////////////////////////
///
/// @fn virtual void DeleteTool::visitNoeudLigne(NoeudLigne* node)
///
/// Implémentation du visiteur Suppression pour un noeud de type
/// NoeudLigne.
///
/// @return Aucune.
///
////////////////////////////////////////////////////////////////////////
void DeleteTool::visit(NoeudLigne* node)
{
	defaultDelete(node);
}

////////////////////////////////////////////////////////////////////////
///
/// @fn virtual void DeleteTool::visitvisitNoeudMur(NoeudMur* node)
///
/// Implémentation du visiteur Suppression pour un noeud de type
/// visitNoeudMur.
///
/// @return Aucune.
///
////////////////////////////////////////////////////////////////////////
void DeleteTool::visit(NoeudMur* node)
{
	defaultDelete(node);
}

////////////////////////////////////////////////////////////////////////
///
/// @fn void DeleteTool::defaultDelete(NoeudAbstrait* node)
///
/// Implémentation du visiteur Suppression par défaut.
///
/// @return Aucune.
///
////////////////////////////////////////////////////////////////////////
void DeleteTool::defaultDelete(NoeudAbstrait* node)
{
	if (!node->estSelectionne() || !node->estSelectionnable())
		return;

	//auto parent = node->obtenirParent();
	//parent->effacer(node);
	buffer.push(node);
}

////////////////////////////////////////////////////////////////////////
///
/// @fn void DeleteTool::deleteBuffer()
///
/// Suppression des objets en tampon.
///
/// @return Aucune.
///
////////////////////////////////////////////////////////////////////////
void DeleteTool::deleteBuffer()
{
	while (!buffer.empty())
	{
		auto parent = buffer.top()->obtenirParent();
		parent->effacer(buffer.top());
		buffer.pop();
	}
}

///////////////////////////////////////////////////////////////////////////////
/// @}
///////////////////////////////////////////////////////////////////////////////
